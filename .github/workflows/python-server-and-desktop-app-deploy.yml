name: Build Hash-CAD internal Python server and Flutter Desktop App

# TODO: This workflow works well for Linux and Windows, but there are still issues with code-signing for mac - need to continue to investigate.

on:
  push:
    tags:
      - 'v*'  # This workflow runs when you push a tag that starts with 'v'
  workflow_dispatch:

jobs:
  build_desktop:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest] # [ubuntu-latest, macos-latest, windows-latest, macos-13]
    runs-on: ${{matrix.os}}
    env:
      ACTIONS_CACHE_DEBUG: true
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history including tags

      - name: Setup Flutter
        uses: subosito/flutter-action@v2.20.0
        with:
          channel: stable

      - name: Clean Flutter Project
        run: flutter clean
        working-directory: flutter_app

      ########### PYTHON SERVER COMPILATION STARTS HERE ###########

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Ensure assets directory exists
        run: |
          mkdir -p ./flutter_app/assets/
        shell: bash
        working-directory: .

      - name: Install Linux Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev \
          libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
          gstreamer1.0-plugins-good gstreamer1.0-plugins-bad \
          gstreamer1.0-plugins-ugly gstreamer1.0-tools

      # Cache the Python server build
      - name: Cache Python server build
        id: cache-python-build
        uses: actions/cache@v4
        with:
          path: ./flutter_app/assets
          key: ${{ matrix.os }}-python-server-${{ hashFiles(
            './flutter_app/python_server/main_server.py',
            './flutter_app/python_server/**/*.py',
            './crisscross/assembly_handle_optimization/**/*.py')}}

      - name: Install environment dependencies
        if: steps.cache-python-build.outputs.cache-hit != 'true'
        run: |
          pip install -r requirements.txt
        working-directory: ./flutter_app/python_server

      - name: Install custom Python library
        if: steps.cache-python-build.outputs.cache-hit != 'true'
        run: |
          pip install -e .
        working-directory: .

      # prepping for intel mac build
      - name: MacOS 13 Prep
        if: steps.cache-python-build.outputs.cache-hit != 'true' && matrix.os == 'macos-13'
        run: |
            echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> $GITHUB_ENV
        working-directory: ./flutter_app/python_server

        # Bundle Python app using Nuitka
      - name: Bundle Python app with Nuitka
        uses: Nuitka/Nuitka-Action@main
        if: steps.cache-python-build.outputs.cache-hit != 'true' && matrix.os != 'windows-latest'
        with:
          nuitka-version: main
          script-name: main_server.py
          mode: onefile
          include-module: matplotlib.backends.backend_pdf
          onefile-tempdir-spec: '{HOME}/.nuitka_cache'
          enable-plugins: no-qt
          working-directory: ./flutter_app/python_server
          output-file: hamming_server
          output-dir: ./nuitka_package

      # Alternative for Windows
      - name: Bundle Python app with Nuitka (Windows)
        uses: Nuitka/Nuitka-Action@main
        if: steps.cache-python-build.outputs.cache-hit != 'true' && matrix.os == 'windows-latest'
        with:
          nuitka-version: main
          script-name: main_server.py
          mode: app
          include-module: matplotlib.backends.backend_pdf, numpy._core._exceptions
          include-package: numpy._core
          onefile-tempdir-spec: "{HOME}\\.nuitka_cache"
          enable-plugins: no-qt
          working-directory: ./flutter_app/python_server
          output-file: hamming_server
          output-dir: ./nuitka_package

      # Move Nuitka app to Flutter assets folder
      # Linux
      - name: Move Nuitka app to Flutter assets (Linux)
        if: matrix.os == 'ubuntu-latest' && steps.cache-python-build.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./flutter_app/assets/
          mv ./flutter_app/python_server/nuitka_package/hamming_server* ./flutter_app/assets/hamming_server_lnx
        shell: bash
        working-directory: .

      # macOS
      - name: Move Nuitka app to Flutter assets (macOS)
        if: (matrix.os == 'macos-13' || matrix.os == 'macos-latest') && steps.cache-python-build.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./flutter_app/assets/
          mv ./flutter_app/python_server/nuitka_package/hamming_server* ./flutter_app/assets/hamming_server_osx
        shell: bash
        working-directory: .

      # Windows
      - name: Move Nuitka app to Flutter assets (Windows)
        if: matrix.os == 'windows-latest' && steps.cache-python-build.outputs.cache-hit != 'true'
        run: |
          move flutter_app/python_server/nuitka_package/hamming_server* flutter_app/assets/hamming_server_win.exe
        shell: pwsh
        working-directory: .

      - name: Verify python server build exists (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: ls -la ./flutter_app/assets/hamming_server_lnx
        shell: bash
        working-directory: .

      - name: Verify python server build exists (macOS)
        if: matrix.os == 'macos-13' || matrix.os == 'macos-latest'
        run: ls -la ./flutter_app/assets/hamming_server_osx
        shell: bash
        working-directory: .

      - name: Verify python server build exists (Windows)
        if: matrix.os == 'windows-latest'
        run: Get-ChildItem -Path ./flutter_app/assets/hamming_server_win.exe
        shell: pwsh
        working-directory: .
        
########### FLUTTER APP COMPILATION STARTS HERE ###########
      - name: Install Development Certificate for Mac
        if: matrix.os == 'macos-latest'
        env:
          MAC_CERTIFICATE: ${{ secrets.MAC_CERTIFICATE }}
          MAC_CERTIFICATE_PASSWORD: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}
        run: |
          echo "$MAC_CERTIFICATE" | base64 --decode > dev_cert.p12
          security create-keychain -p "temp_password" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "temp_password" build.keychain
          security import dev_cert.p12 -k build.keychain -P "$MAC_CERTIFICATE_PASSWORD" -T /usr/bin/codesign || (echo "Certificate import failed" && exit 1)
          security set-key-partition-list -S apple-tool:,apple: -s -k "temp_password" build.keychain

      - name: Update Version from Git
        run: dart run ./lib/app_management/git_version_updater.dart
        working-directory: ./flutter_app

      - name: Install Flutter Dependencies
        run: flutter pub get
        working-directory: flutter_app

      - name: Build Flutter Desktop App (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          flutter build windows --release
        working-directory: flutter_app

      - name: Configure Mac Code Signing Identity
        if: matrix.os == 'macos-latest'
        env:
          CODESIGN_MAC_IDENTITY: ${{ secrets.CODESIGN_MAC_IDENTITY }}
          MAC_TEAM_ID: ${{ secrets.MAC_TEAM_ID }}
        run: |
          PBXPROJ="flutter_app/macos/Runner.xcodeproj/project.pbxproj"
          sed -i '' "s/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g" "$PBXPROJ"
          sed -i '' "s/CODE_SIGN_IDENTITY = .*;/CODE_SIGN_IDENTITY = \"$CODESIGN_MAC_IDENTITY\";/g" "$PBXPROJ"
          sed -i '' "s/DEVELOPMENT_TEAM = .*;/DEVELOPMENT_TEAM = \"$MAC_TEAM_ID\";/g" "$PBXPROJ"

      - name: Build Flutter Desktop App (Mac)
        if: matrix.os == 'macos-latest' || matrix.os == 'macos-13'
        run: |
          flutter build macos --release
        working-directory: flutter_app

      - name: Build Flutter Desktop App (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          flutter build linux --release
        working-directory: flutter_app

      - name: Remove quarantine flag from macOS app
        if: runner.os == 'macOS'
        run: |
          xattr -rd com.apple.quarantine "./flutter_app/build/macos/Build/Products/Release/#-CAD.app"
        working-directory: .

      - name: Compress macOS app
        if: runner.os == 'macOS'
        run: ditto -c -k --sequesterRsrc --keepParent "./flutter_app/build/macos/Build/Products/Release/#-CAD.app" "Hash-CAD-macOS.zip"
        working-directory: .

      - name: Compress Linux build
        if: runner.os == 'Linux'
        run: |
          mkdir -p ./tmp/linux_build_copy
          cp -r ./flutter_app/build/linux/x64/release/bundle ./tmp/linux_build_copy
          tar -czvf "Hash-CAD-linux.tar.gz"  ./tmp/linux_build_copy
        working-directory: .

      - name: Compress Windows build
        if: runner.os == 'Windows'
        run: Compress-Archive -Path ".\flutter_app\build\windows\x64\runner\Release\*" -DestinationPath "Hash-CAD-windows.zip"
        shell: pwsh
        working-directory: .

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hash-cad-${{ matrix.os }}
          path: |
            ./Hash-CAD-macOS.zip
            ./Hash-CAD-linux.tar.gz
            ./Hash-CAD-windows.zip
          compression-level: 0
          overwrite: true

  release:
    needs: build_desktop
    runs-on: ubuntu-latest
    steps:
      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: hash-cad-windows-latest
          path: artifacts/

      - name: Download Mac Artifact
        uses: actions/download-artifact@v4
        with:
          name: hash-cad-macos-latest
          path: artifacts/

      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: hash-cad-ubuntu-latest
          path: artifacts/

      - name: Get tag name
        id: get_tag
        run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: List downloaded files
        run: ls -R artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ env.TAG }}
          draft: false
          prerelease: true
          generate_release_notes: true
          files: |
              artifacts/Hash-CAD-windows.zip
              artifacts/Hash-CAD-linux.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


